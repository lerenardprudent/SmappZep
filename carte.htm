<!DOCTYPE html>
<html>
  <head>
    <title>SMAPP - GÃ©olocalisation de participants</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="obj/jquery-1.8.0.min.js"></script>
    <link rel="stylesheet" href="obj/leaflet.css" />
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD4qnbkOe5X7pll7qyIFtkeLzjzkbPnAGo&amp;libraries=places,drawing,geometry,panoramio,weather&region=ca&sensor=false"></script>
    <style>
      body { padding: 0; margin: 0; }
      html, body, #map { height: 100%; width: 100%; }
    </style>
    <script src="http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.js"></script>
  </head>
  <body>
    <div id="map"></div>
    <script>
        var _geocoder = new google.maps.Geocoder();
            // create a map in the "map" div, set the view to a given place and zoom
        var map = L.map('map').setView([45.51947, -73.56017],12);
        var latMin = null, latMax = null, lngMin = null, lngMax = null;
        var _data, _numAddresses, _numGeocoded = 0, _participantId = null;
        
        // add an OpenStreetMap tile layer
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        function addPopup(feature, layer) {
            // does this feature have a property named popupContent?
            if (feature.properties && feature.properties.name) {
                layer.bindPopup(feature.properties.name);
            }
            var coords = feature.geometry.coordinates;
            var lat = coords[1];
            var lng = coords[0];
            if ( latMin == null || lat < latMin ) {
              latMin = lat;
            }
            if ( latMax == null || lat > latMax ) {
              latMax = lat;
            }
            if ( lngMin == null || lng < lngMin ) {
              lngMin = lng;
            }
            if ( lngMax == null || lng > lngMax ) {
              lngMax = lng;
            }
        }

        function readAddresses()
        {
          var fileContents = null;
          $.ajax({
              url: "./adresses.json",
              async: false,   // asynchronous request? (synchronous requests are discouraged...)
              cache: false,   // with this, you can force the browser to not make cache of the retrieved data
              mimeType: "textPlain",
              dataType: "json",  // jQuery will infer this, but you can set explicitly
              success: function( data, textStatus, jqXHR ) {
                _data = data; // can be a global variable too...
              },
              error: function (xhr, ajaxOptions, thrownError) {
                console.log(thrownError);
              }
          });
          return fileContents;
        }
        
        function geocodeAddress()
        {
          var addrData = _data.adresses[_numGeocoded];
          console.info(_numGeocoded, addrData.adresse);
          _geocoder.geocode( { 'address': addrData.adresse }, geocoderRespHandler );
        }
        
        function geocoderRespHandler(results, status)
        {
          if (status == google.maps.GeocoderStatus.OK) {
            geocodedCoords = results[0].geometry.location;
            var lat = geocodedCoords.lat();
            var lng = geocodedCoords.lng();
            console.info("Geocoder result:", lat, lng);
            
            if ( latMin == null || lat < latMin ) {
              latMin = lat;
            }
            if ( latMax == null || lat > latMax ) {
              latMax = lat;
            }
            if ( lngMin == null || lng < lngMin ) {
              lngMin = lng;
            }
            if ( lngMax == null || lng > lngMax ) {
              lngMax = lng;
            }
            
            var info = _data.adresses[_numGeocoded];
            var GreenIcon = L.Icon.Default.extend({ options: {
                  iconUrl: 'media/marker-icon-green.png',
                  iconSize:     [41, 41]
                }});
            var greenIcon = new GreenIcon();
            var markerOptions = ( info.type == "PAR" ? {} : { icon: greenIcon } );
            var marker = L.marker([geocodedCoords.lat(), geocodedCoords.lng()], markerOptions );
            marker.bindPopup("ID : <b>" + info.id + "</b><br>Type : <b>" + info.type + "</b><br>Cohorte : <b>" + info.cohorte + "</b><br>Temps : <b>" + info.temps + "</b>");
            marker.addTo(map);
          }
          else if (status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
            setTimeout(geocodeAddress, 200);
            return;
          }
          else {
            console.info("Geocoding failed!");
          }
          
          _numGeocoded += 1;
            
          if (_numGeocoded == _numAddresses) {
            var southWest = L.latLng(latMin, lngMin), northEast = L.latLng(latMax, lngMax);
            var bounds = L.latLngBounds(southWest, northEast);
            map.fitBounds(bounds);
          }
          else {
            geocodeAddress();
          }
        }
        
        $(document).ready( function() {
          $.ajaxSetup({'beforeSend': function(xhr){
            if (xhr.overrideMimeType)
              xhr.overrideMimeType("text/plain");
            }
          });
          readAddresses();
          _numAddresses = _data.nmb_adresses;
          if ( _numAddresses > 0 ) {
            geocodeAddress();
          }
      });
    </script>
  </body>
</html>